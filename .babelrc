{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript"
  ],
  "plugins": [
    "@babel/plugin-proposal-class-properties",
    ["@babel/plugin-proposal-decorators", { "legacy": true }],
    "@babel/plugin-transform-react-constant-elements",
    "@babel/plugin-transform-react-inline-elements"
  ]
}

/*  
Presets:
"env": This preset allows you to use the latest ECMAScript features by automatically determining the necessary transformations based on the environment you specify. It ensures that your code is compatible with the targeted browsers or Node.js versions.
"react": This preset enables support for JSX syntax and other React-related transformations.
"typescript": This preset enables support for typescript

Plugins:
"transform-class-properties": This plugin allows you to use class properties syntax in your JavaScript classes. It transforms class properties and methods into a compatible format for older browsers or environments that do not support this syntax natively.
"transform-decorators": This plugin enables support for the decorator pattern, allowing you to use decorators in your code. Decorators provide a way to modify or annotate classes and their members.
"transform-react-constant-elements": This plugin optimizes React by transforming JSX elements into constant values where possible. It identifies elements that don't rely on props or state changes and converts them into more efficient representations.
"transform-react-inline-elements": This plugin is similar to "transform-react-constant-elements" but focuses on optimizing the performance of React by inlining the result of function components that don't have side effects. It reduces the overhead of function calls and component re-rendering.
*/
